#!/usr/bin/env python3
"""
Script to help manage package lists across multiple architectures
"""

import argparse
import configparser
import platform

parser = argparse.ArgumentParser(description="Output the package list.")
parser.add_argument(
    "-a",
    "--arch",
    default=None,
    help="force a specific architecture. Default uses host arch.",
)
parser.add_argument(
    "-v",
    "--verbose",
    action="store_true",
    help="Display verbose output suitable for debugging.",
)

args = parser.parse_args()

config = configparser.RawConfigParser(allow_no_value=True)
config.optionxform = str

config.read("packages.cfg")

if args.arch is None:
    pkg_arch = platform.machine()
else:
    pkg_arch = args.arch

if args.verbose is True:
    print("# Printing packages for all architectures")
for package in config["all"]:
    print(package)

if args.verbose is True:
    print("# Printing packages for architecture: {}".format(pkg_arch))
try:
    for arch_package in config[pkg_arch]:
        print(arch_package)
except KeyError:
    if args.verbose is True:
        print("# no packages found for supplied architecture")
